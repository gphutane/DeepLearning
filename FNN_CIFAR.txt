PROBLEM STATEMENT
Build Feedforward neural networks with Keras and TensorFlow for classification of CIFAR10 image dataset using the following steps:
a.    Import the necessary packages
b.    Load the training and testing data
c.    Define the network architecture using Keras
d.    Train the model using SGD/Adam optimizer
e.    Evaluate the network  
f.    Plot the training loss and accuracy

import pandas as pd
import numpy as  np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow.keras.layers import BatchNormalization, Conv2D, Dense, Dropout, MaxPooling2D, Flatten
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.optimizers import SGD

train = pd.read_csv(r"/content/train.csv")
train

x_train = train.drop(['label'], axis = 1).values
y_train = train['label'].values

x_train.shape

x_train = x_train.reshape((50000, 32, 32, 3)).astype('float32')/255

test = pd.read_csv(r"/content/test.csv")
test

model = Sequential()
model.add(Conv2D(32, (3,3), input_shape = (32,32,3), activation = 'relu'))
model.add(BatchNormalization())
model.add(Conv2D(64, (3,3),activation = 'relu'))
model.add(MaxPooling2D((2,2)))
model.add(Flatten())
model.add(Dense(64, activation = 'relu'))
model.add(Dropout(0.2))
model.add(Dense(10, activation = 'softmax'))
sgd = SGD(learning_rate = 0.1)
model.compile(optimizer= sgd, loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])
model.summary()

r = model.fit(x_train, y_train, validation_split=0.2, epochs = 11, batch_size = 64)

x_test = x_test.reshape((10000, 32, 32, 3)).astype('float32')/255

predictions = model.predict(x_test)

predictions

test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(f'Test Loss: {test_loss:.4f}')
print(f'Test Accuracy: {test_accuracy:.4f}')

predictions = model.predict(x_test)

r.history.keys()

plt.plot(r.history['accuracy'], label = 'accuracy', color = 'green')
plt.plot(r.history['val_accuracy'], label = 'val_accuracy', color = 'red')
plt.legend()

plt.plot(r.history['loss'], label = 'loss', color = 'red')
plt.plot(r.history['val_loss'], label = 'val_loss', color = 'blue')
plt.legend()
